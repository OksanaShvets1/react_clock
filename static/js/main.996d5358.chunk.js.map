{"version":3,"sources":["components/Clock/Clock.tsx","App.tsx","index.tsx"],"names":["Clock","intervalID","state","time","Date","toUTCString","slice","handleDocumentClick","window","setInterval","setState","document","addEventListener","this","prevProps","name","props","console","debug","removeEventListener","className","Component","App","hasClock","clockName","newName","Math","floor","random","event","preventDefault","ReactDOM","render","getElementById"],"mappings":"6MAUaA,EAAb,4MACEC,gBADF,IAGEC,MAAQ,CAAEC,MAAM,IAAIC,MAAOC,cAAcC,OAAO,IAAK,IAHvD,EAoBEC,oBAAsB,WACpB,EAAKN,WAAaO,OAAOC,aAAY,WACnC,EAAKC,SAAS,CAAEP,MAAM,IAAIC,MAAOC,cAAcC,OAAO,IAAK,OAC1D,MAvBP,uDAKE,WACEK,SAASC,iBAAiB,QAASC,KAAKN,uBAN5C,gCASE,SAAmBO,GACbA,EAAUC,OAASF,KAAKG,MAAMD,MAEhCE,QAAQC,MAAR,uBAA8BJ,EAAUC,KAAxC,eAAmDF,KAAKG,MAAMD,SAZpE,kCAgBE,WACEJ,SAASQ,oBAAoB,QAASN,KAAKN,uBAjB/C,oBA0BE,WACE,IAAQQ,EAASF,KAAKG,MAAdD,KAER,OACE,sBAAKK,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SACGL,IAGF,YAED,sBAAMK,UAAU,cAAhB,SACGP,KAAKX,MAAMC,cAtCtB,GAA2BkB,aCIpB,IAAMC,EAAb,4MACErB,gBADF,IAGEC,MAAQ,CACNqB,UAAU,EACVC,UAAW,WALf,uDAQE,WAAqB,IAAD,OAClBX,KAAKZ,WAAaO,OAAOC,aAAY,WACnC,IAAMgB,EAbJ,SAAN,OAAgBC,KAAKC,MAAsB,IAAhBD,KAAKE,WAgB5BX,QAAQC,MAAR,oCAA2CO,IAC3C,EAAKf,SAAS,CAAEc,UAAWC,MAC1B,MAEHd,SAASC,iBAAiB,eAAe,SAACiB,GACxCA,EAAMC,iBACN,EAAKpB,SAAS,CAAEa,UAAU,OAG5BZ,SAASC,iBAAiB,SAAS,WACjC,EAAKF,SAAS,CAAEa,UAAU,SAvBhC,oBA2BE,WACE,MAAgCV,KAAKX,MAA7BqB,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAElB,OACE,sBAAKJ,UAAU,MAAf,UACE,6CAECG,GAAY,cAAC,EAAD,CAAOR,KAAMS,WAlClC,GAAyBH,aCXzBU,IAASC,OACP,cAAC,EAAD,IACArB,SAASsB,eAAe,W","file":"static/js/main.996d5358.chunk.js","sourcesContent":["import { Component } from 'react';\n\ninterface ClockProps {\n  name: string;\n}\n\ninterface ClockState {\n  time: string;\n}\n\nexport class Clock extends Component<ClockProps, ClockState> {\n  intervalID: number | undefined;\n\n  state = { time: new Date().toUTCString().slice(-12, -4) };\n\n  componentDidMount() {\n    document.addEventListener('click', this.handleDocumentClick);\n  }\n\n  componentDidUpdate(prevProps: ClockProps) {\n    if (prevProps.name !== this.props.name) {\n      // eslint-disable-next-line no-console\n      console.debug(`Renamed from ${prevProps.name} to ${this.props.name}`);\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleDocumentClick);\n  }\n\n  handleDocumentClick = () => {\n    this.intervalID = window.setInterval(() => {\n      this.setState({ time: new Date().toUTCString().slice(-12, -4) });\n    }, 1000);\n  };\n\n  render() {\n    const { name } = this.props;\n\n    return (\n      <div className=\"Clock\">\n        <strong className=\"Clock__name\">\n          {name}\n        </strong>\n\n        {' time is '}\n\n        <span className=\"Clock__time\">\n          {this.state.time}\n        </span>\n      </div>\n    );\n  }\n}\n","import { Component } from 'react';\n\nimport './App.scss';\nimport { Clock } from './components/Clock/Clock';\n\ninterface AppState {\n  hasClock: boolean;\n  clockName: string;\n}\n\nfunction getRandomName(): string {\n  return `Clock-${Math.floor(Math.random() * 100)}`;\n}\n\nexport class App extends Component<{}, AppState> {\n  intervalID: number | undefined;\n\n  state = {\n    hasClock: true,\n    clockName: 'Clock-0',\n  };\n\n  componentDidMount() {\n    this.intervalID = window.setInterval(() => {\n      const newName = getRandomName();\n\n      // eslint-disable-next-line no-console\n      console.debug(`Generated new clock name: ${newName}`);\n      this.setState({ clockName: newName });\n    }, 3300);\n\n    document.addEventListener('contextmenu', (event) => {\n      event.preventDefault();\n      this.setState({ hasClock: false });\n    });\n\n    document.addEventListener('click', () => {\n      this.setState({ hasClock: true });\n    });\n  }\n\n  render() {\n    const { hasClock, clockName } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n\n        {hasClock && <Clock name={clockName} />}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}